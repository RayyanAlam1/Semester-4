========================================================================
QUESTION # 1:
======================================================================  
#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>
int main(){
	pid_t curr = fork();
	if(curr < 0){
		printf("Unsuccessful Child Process Creation");
		exit(0);
	}else if(curr > 0){
		wait(NULL);
		int i;
		printf("Even numbers from 1-10: ");
		for(i=1;i<=10;i++){
			if(i%2==0){
				printf("%d  ",i);
			}
		}
		printf("\nParent Ends\n");
	}else{
		int i;
                printf("Odd numbers from 1-10: ");
                for(i=1;i<=10;i++){ 
                        if(i%2!=0){
                                printf("%d  ",i);
                        }
                }
		printf("\nChild Ends\n");

	}
	return 0;
}
======================================================================
QUESTION # 2:
=====================================================================
#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>
int main(){
	int n,i;
	printf("Enter the number of children: ");
	scanf("%d",&n);
	for(i=0;i<n;i++){
		if(fork()==0){
			printf("Child = %d, parent = %d\n",getpid(),getppid());
			exit(0);
		}
	}
	for(i=0;i<n;i++){
		wait(NULL);
	}
	return 0;
}

==========================================================================
QUESTION # 3:
=========================================================================
#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>
int main(){
	pid_t c1 = fork();
	if(c1 == 0){
		sleep(4);
		printf("Child 1 with ID = %d\n",getpid());
	}else{
		pid_t c2 = fork();
		if(c2 == 0){
			sleep(3);
			printf("Child 2 with ID = %d\n",getpid());
		}else{
			pid_t c3 = fork();
			if(c3 == 0){
				printf("Child 3 with ID = %d\n",getpid());
			}else{
				sleep(5);
				printf("Parent with ID = %d\n",getpid());
			}
		}
	}
	return 0;
}
=========================================================================
QUESTION # 4:
=========================================================================
#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>
int main(){
	pid_t c1 = fork();
	if(c1 > 0){
		wait(NULL);
		printf("I am parent 1 after execution of my child with ID = %d\n",getpid());
	}else{
		printf("I am child 1 with ID = %d and parent ID = %d\n",getpid(),getppid());
		pid_t c2 = fork();
		if(c2 > 0){
			wait(NULL);
			printf("I am parent 2 after execution of my child with ID = %d\n",getpid());
		}else{
			printf("I am child 2 with ID = %d and parent ID = %d\n",getpid(),getppid());
			pid_t c3 = fork();
			if(c3 > 0){
				wait(NULL);
				printf("I am parent 3 after execution of my child with ID = %d\n",getpid());
			}else{
				printf("I am child 3 with ID = %d and parent ID = %d\n",getpid(),getppid());
				pid_t c4 = fork();
				if(c4 > 0){
					wait(NULL);
					printf("I am parent 4 after execution of my child with ID = %d\n",getpid());
				}else{
					printf("I am child 4 with ID = %d and parent ID = %d\n",getpid(),getppid());
					exit(0);
				}
				exit(0);
			}
			exit(0);
		}
		exit(0);
	}
	return 0;
}
======================================================================
QUESTION # 5:
=====================================================================
**********************************************************************
	STRUCTURE 1
**********************************************************************
#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>
int main(){
	printf("I am process 1 with ID = %d\n",getpid());
	pid_t c1 = fork();
	if(c1 == 0){
		printf("I am process 5 with ID = %d and parent = %d\n",getpid(),getppid());
		exit(0);
	}else{
		pid_t c2 = fork();
		if(c2 == 0){
			printf("I am process 3 with ID = %d and parent = %d\n",getpid(),getppid());
			pid_t c3 = fork();
			if(c3 == 0){
				printf("I am process 4 with ID = %d and parent = %d\n",getpid(),getppid());
				exit(0);
			}
			wait(NULL);
		}
		wait(NULL);
	}
	wait(NULL);
	return 0;
}
**********************************************************************
	STRUCTURE 2
**********************************************************************

#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>
int main(){
	printf("I am process 6 with ID = %d\n",getpid());
	pid_t c1 = fork();
	if(c1 == 0){
		printf("I am process 9 with ID = %d and Parent = %d\n",getpid(),getppid());
		exit(0);
	}
	wait(NULL);
	return 0;
}
**********************************************************************
	STRUCTURE 3
**********************************************************************
#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>
int main(){
	printf("I am process 8 with ID = %d\n",getpid());
	pid_t c1 = fork();
	if(c1 == 0){
		printf("I am process 0 with ID = %d and Parent = %d\n",getpid(),getppid());
		pid_t c2 = fork();
		if(c2 == 0){
			printf("I am process 7 with ID = %d and Parent = %d\n",getpid(),getppid());
		}else{
			pid_t c3 = fork();
			if(c3 == 0){
				printf("I am process 2 with ID = %d and Parent = %d\n",getpid(),getppid());
			}
		}
		wait(NULL);
	}
	wait(NULL);
	return 0;
}
**********************************************************************
	STRUCTURE 4
**********************************************************************
#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>
int main(){
	printf("I am root with ID = %d\n",getpid());
	pid_t c1 = fork();
	if(c1 == 0){
		printf("I am inner node with ID = %d and Parent = %d\n",getpid(),getppid());
		pid_t c2 = fork();
		if(c2 == 0){
			printf("I am leaf with ID = %d and Parent = %d\n",getpid(),getppid());
			exit(0);
		}else{
			pid_t c3 = fork();
			if(c3 == 0){
				printf("I am leaf with ID = %d and Parent = %d\n",getpid(),getppid());
				exit(0);
			}
			wait(NULL);
		}
	}else{
		pid_t c4 = fork();
		if(c4 == 0){
			printf("I am leaf with ID = %d and Parent = %d\n",getpid(),getppid());
			exit(0);
		}
		wait(NULL);
	}
	wait(NULL);
	return 0;
}
**********************************************************************
	STRUCTURE 5
**********************************************************************
#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>
int main(){
	printf("I am process 10 with ID = %d\n",getpid());
	pid_t c1 = fork();
	if(c1 == 0){
		printf("I am process 6 with ID = %d and Parent = %d\n",getpid(),getppid());
		pid_t c2 = fork();
		if(c2 == 0){
			printf("I am process 4 with ID = %d and Parent = %d\n",getpid(),getppid());
			exit(0);
		}else{
			pid_t c3 = fork();
			if(c3 == 0){
				printf("I am process 8 with ID = %d and Parent = %d\n",getpid(),getppid());
				exit(0);
			}
			wait(NULL);
		}
	}else{
		pid_t c4 = fork();
		if(c4 == 0){
			printf("I am process 18 with ID = %d and Parent = %d\n",getpid(),getppid());
			pid_t c5 = fork();
			if(c5 == 0){
				printf("I am process 15 with ID = %d and Parent = %d\n",getpid(),getppid());
				exit(0);
			}else{
				pid_t c6 = fork();
				if(c6 == 0){
					printf("I am process 21 with ID = %d and Parent = %d\n",getpid(),getppid());
					exit(0);
				}
				wait(NULL);
			}
		}
		wait(NULL);
	}
	wait(NULL);
	return 0;
}
**********************************************************************
	STRUCTURE 6
**********************************************************************
#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>
int main(){
	printf("I am process A with ID = %d\n",getpid());
	pid_t c1 = fork();
	if(c1 == 0){
		printf("I am process C with ID = %d and Parent = %d\n",getpid(),getppid());
		pid_t c2 = fork();
		if(c2 == 0){
			printf("I am process F with ID = %d and Parent = %d\n",getpid(),getppid());
			exit(0);
		}else{
			pid_t c3 = fork();
			if(c3 == 0){
				printf("I am process E with ID = %d and Parent = %d\n",getpid(),getppid());
				exit(0);
			}
			wait(NULL);
		}
	}else{
		pid_t c4 = fork();
		if(c4 == 0){
			printf("I am process B with ID = %d and Parent = %d\n",getpid(),getppid());
			pid_t c5 = fork();
			if(c5 == 0){
				printf("I am process D with ID = %d and Parent = %d\n",getpid(),getppid());
				exit(0);
			}
		}
		wait(NULL);
	}
	wait(NULL);
	return 0;
}
**********************************************************************
	STRUCTURE 7
**********************************************************************
#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>
int main(){
	printf("I am process A with ID = %d\n",getpid());
	pid_t c1 = fork();
	if(c1 == 0){
		printf("I am process C with ID = %d and Parent = %d\n",getpid(),getppid());
		pid_t c2 = fork();
		if(c2 == 0){
			printf("I am process F with ID = %d and Parent = %d\n",getpid(),getppid());
			exit(0);
		}else{
			pid_t c3 = fork();
			if(c3 == 0){
				printf("I am process G with ID = %d and Parent = %d\n",getpid(),getppid());
				exit(0);
			}
			wait(NULL);
		}
	}else{
		pid_t c4 = fork();
		if(c4 == 0){
			printf("I am process B with ID = %d and Parent = %d\n",getpid(),getppid());
			pid_t c5 = fork();
			if(c5 == 0){
				printf("I am process E with ID = %d and Parent = %d\n",getpid(),getppid());
				exit(0);
			}
		}else{
			pid_t c6 = fork();
			if(c6 == 0){
				printf("I am process D with ID = %d and Parent = %d\n",getpid(),getppid());
				exit(0);
			}
			wait(NULL);
		}
		wait(NULL);
	}
	wait(NULL);
	return 0;
}
**********************************************************************
	STRUCTURE 8
**********************************************************************
#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>
int main(){
	printf("I am process A with ID = %d\n",getpid());
	pid_t c1 = fork();
	if(c1 == 0){
		printf("I am process B with ID = %d and Parent = %d\n",getpid(),getppid());
		pid_t c2 = fork();
		if(c2 == 0){
			printf("I am process F with ID = %d and Parent = %d\n",getpid(),getppid());
			exit(0);
		}else{
			pid_t c3 = fork();
			if(c3 == 0){
				printf("I am process E with ID = %d and Parent = %d\n",getpid(),getppid());
				exit(0);
			}
			wait(NULL);
		}
	}else{
		pid_t c4 = fork();
		if(c4 == 0){
			printf("I am process D with ID = %d and Parent = %d\n",getpid(),getppid());
			pid_t c5 = fork();
			if(c5 == 0){
				printf("I am process G with ID = %d and Parent = %d\n",getpid(),getppid());
				exit(0);
			}else{
				pid_t c6 = fork();
				if(c6 == 0){
					printf("I am process H with ID = %d and Parent = %d\n",getpid(),getppid());
				}
			}
			wait(NULL);
		}else{
			pid_t c7 = fork();
			if(c7 == 0){
				printf("I am process C with ID = %d and Parent = %d\n",getpid(),getppid());
				exit(0);
			}
			wait(NULL);
		}
		wait(NULL);
	}
	wait(NULL);
	return 0;

**********************************************************************
	STRUCTURE 9
**********************************************************************
#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>
int main(){
	printf("I am process 1 with ID = %d\n",getpid());
	pid_t c1 = fork();
	if(c1 == 0){
		printf("I am process 3 with ID = %d and Parent = %d\n",getpid(),getppid());
		pid_t c2 = fork();
		if(c2 == 0){
			printf("I am process 7 with ID = %d and Parent = %d\n",getpid(),getppid());
			exit(0);
		}else{
			pid_t c3 = fork();
			if(c3 == 0){
				printf("I am process 6 with ID = %d and Parent = %d\n",getpid(),getppid());
				exit(0);
			}
			
		}
		wait(NULL);
	}else{
		pid_t c4 = fork();
		if(c4 == 0){
			printf("I am process 2 with ID = %d and Parent = %d\n",getpid(),getppid());
			pid_t c5 = fork();
			if(c5 == 0){
				printf("I am process 5 with ID = %d and Parent = %d\n",getpid(),getppid());
				exit(0);
			}else{
				pid_t c6 = fork();
				if(c6 == 0){
					printf("I am process 4 with ID = %d and Parent = %d\n",getpid(),getppid());
					pid_t c7 = fork();
					if(c7 == 0){
						printf("I am process 9 with ID = %d and Parent = %d\n",getpid(),getppid());
					}else{
						pid_t c8 = fork();
						if(c8 == 0){
							printf("I am process 8 with ID = %d and Parent = %d\n",getpid(),getppid());
						}
					}
					wait(NULL);
				}
				wait(NULL);
			}
		}
		wait(NULL);
	}
	wait(NULL);
	return 0;
}
